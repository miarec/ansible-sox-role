---
- name: check if {{ library_config.key }} installed
  stat:
    path: "{{ library_config.value.install_dir }}/{{ library_config.value.library_file }}"
  register: _library_exists
  ignore_errors: true
  changed_when: false
  failed_when: false

- name: Install Library when not already installed
  block:
    - name: download tarball | {{ library_config.key }}
      get_url:
        url: "{{ library_config.value.download_url }}"
        dest: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}.tar.gz"
        checksum: "{{ library_config.value.download_checksum | default(omit) }}"

    - name: extract tarball | {{ library_config.key }}
      unarchive:
        src: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}.tar.gz"
        dest: "{{ library_config.value.download_dir }}"
        creates: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}/configure"
        copy: false

    # When library is libmad, addiotnal steps are needed
    - include_tasks: configure_libmad.yml
      vars:
        libmad_tmp_dir: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}"
      when: library_config.key == "libmad"

    - name: Run configure | {{ library_config.key }}
      command: ./configure {{ library_config.value.configure_args }}
      args:
        chdir: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}"
        creates: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}/Makefile"
      environment:
        LD_LIBRARY_PATH: "{{ library_config.value.install_dir }}"

    - name: Run make | {{ library_config.key }}
      command: make -j{{ ansible_processor_cores + 1 }}
      args:
        chdir: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}"

    - name: Run make install | {{ library_config.key }}
      command: make install
      become: true
      args:
        chdir: "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}"
        creates: "{{ library_config.value.install_dir }}/{{ library_config.value.library_file }}"
      notify:
        - reload ldconfig

    - name: Clean up the source files | {{ library_config.key }}
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}.tar.gz"
        - "{{ library_config.value.download_dir }}/{{ library_config.key }}-{{ library_config.value.version }}"
      when: library_config.value.download_cleanup | default(true)

  when: not _library_exists.stat.exists
